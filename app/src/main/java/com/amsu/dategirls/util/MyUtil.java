package com.amsu.dategirls.util;import android.app.Activity;import android.app.ActivityManager;import android.app.ActivityManager.RunningAppProcessInfo;import android.app.ProgressDialog;import android.content.Context;import android.content.SharedPreferences;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.util.DisplayMetrics;import android.util.Log;import android.util.TypedValue;import android.view.WindowManager;import android.widget.Toast;import com.amsu.dategirls.application.MyApplication;import com.amsu.dategirls.bean.User;import java.io.Closeable;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Locale;public class MyUtil {    private static ProgressDialog dialog;    public static String getProcessName(Context cxt, int pid) {        ActivityManager am = (ActivityManager) cxt                .getSystemService(Context.ACTIVITY_SERVICE);        List<RunningAppProcessInfo> runningApps = am.getRunningAppProcesses();        if (runningApps == null) {            return null;        }        for (RunningAppProcessInfo procInfo : runningApps) {            if (procInfo.pid == pid) {                return procInfo.processName;            }        }        return null;    }    public static void close(Closeable closeable) {        try {            if (closeable != null) {                closeable.close();            }        } catch (IOException e) {            e.printStackTrace();        }    }    public static DisplayMetrics getScreenMetrics(Context context) {        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);        DisplayMetrics dm = new DisplayMetrics();        wm.getDefaultDisplay().getMetrics(dm);        return dm;    }    public static float dp2px(Context context, float dp) {        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,                context.getResources().getDisplayMetrics());    }    public static boolean isWifi(Context context) {        ConnectivityManager connectivityManager = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetInfo = connectivityManager.getActiveNetworkInfo();        if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_WIFI) {            return true;        }        return false;    }    public static void executeInThread(Runnable runnable) {        new Thread(runnable).start();    }    public static void showDialog(String message,Context context){        try {            if (dialog == null) {                dialog = new ProgressDialog(context);                dialog.setCancelable(true);   //返回时                dialog.setCanceledOnTouchOutside(false);  //进度条外部区域            }            dialog.setMessage(message);            dialog.show();        } catch (Exception e) {            // 在其他线程调用dialog会报错        }    }    public static void hideDialog() {        if (dialog != null && dialog.isShowing())            try {                dialog.dismiss();            } catch (Exception e) {            }    }    public static String getStringValueFromSP(String key){        return MyApplication.sharedPreferences.getString(key,"");    }    public static boolean getBooleanValueFromSP(String key){        return MyApplication.sharedPreferences.getBoolean(key,false);    }    public static int getIntValueFromSP(String key){        return MyApplication.sharedPreferences.getInt(key,-1);    }    public static void putStringValueFromSP(String key,String value){        SharedPreferences.Editor edit = MyApplication.sharedPreferences.edit();        edit.putString(key,value).apply();    }    public static void putBooleanValueFromSP(String key,Boolean value){        SharedPreferences.Editor edit = MyApplication.sharedPreferences.edit();        edit.putBoolean(key,value).apply();    }    public static void putIntValueFromSP(String key,int value){        SharedPreferences.Editor edit = MyApplication.sharedPreferences.edit();        edit.putInt(key,value).apply();    }    public static boolean isEmpty(String text){        if (text==null || text.equals("")){            return true;        }        else {            return false;        }    }    public static String getFormatTime(Date date){        //SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd H:m:s");        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd", Locale.CHINA);  //07-12 15:10        return format.format(date);    }    public static String getSpecialFormatTime(String stringFormat,Date date){        //SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd H:m:s");        SimpleDateFormat format = new SimpleDateFormat(stringFormat, Locale.CHINA);  //07-12 15:10        return format.format(date);    }    public static String getDynamicsFormatTime(Date date){        return getSpecialFormatTime("yyyy/MM/dd HH:mm",date);    }    public static void showToask(Context context ,String text){        Toast.makeText(context,text,Toast.LENGTH_SHORT).show();    }    public static void saveUserToSP(User user) {        //将登陆用户信息保存在MyApplication类的sharedPreferences        SharedPreferences.Editor edit = MyApplication.sharedPreferences.edit();        edit.putString("userobjectId",user.getObjectId());        edit.putString("userID",user.getUserID());        edit.putString("phone",user.getPhone());        edit.putString("nickName",user.getNickName());        edit.putString("iconUrl",user.getIconUrl());        edit.putString("city",user.getCity());        edit.putString("birthday",user.getBirthday());        edit.putString("sex",user.getSex());        edit.apply();    }    public static int getUserAge(String birthday){        if (!birthday.equals("") && !birthday.equals("null")) {            String[] split = birthday.split("-");            Date date = new Date();            int age = 1900 + date.getYear() - Integer.parseInt(split[0]);            return age;        }        return 0;    }    public static float getScreeenWidth(Activity activity){        DisplayMetrics dm = new DisplayMetrics();        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);        int width = dm.widthPixels;  //屏幕宽        return width;    }    public static float getScreeenHeight(Activity activity){        DisplayMetrics dm = new DisplayMetrics();        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);        int height = dm.heightPixels;  //屏幕高        return height;    }}